import json
import os
import re
from functools import reduce
import log.logger as logger

# ==============================================================================
# Definici√≥n de Rutas para Archivos JSON 
# ==============================================================================
RUTA_USUARIOS = "usuarios.json"
RUTA_STOCK = "stock.json"
RUTA_PRECIOS = "precios.json"
RUTA_HISTORIAL_VENTAS = "historial_ventas.json"
RUTA_VENTAS_REALIZADAS = "ventas_realizadas.json"

def cargar_datos(ruta_archivo, tipo_dato_default):
    """
    Carga datos desde un archivo JSON.
    Si el archivo no existe, devuelve el tipo de dato por defecto (lista o diccionario vac√≠o).
    """
    if not os.path.exists(ruta_archivo):
        with open(ruta_archivo, 'w', encoding='utf-8') as archivo_nuevo:
            json.dump(tipo_dato_default, archivo_nuevo, indent=4, ensure_ascii=False)
        logger.info(f"El archivo {ruta_archivo} no exist√≠a. Se cre√≥ con datos por defecto.")
        logger.debug(f"Datos por defecto usados para {ruta_archivo}: {tipo_dato_default}")
        return tipo_dato_default

    try:
        with open(ruta_archivo, 'r', encoding='utf-8') as archivo:
            contenido = archivo.read()
            if not contenido:
                logger.debug(f"El archivo {ruta_archivo} estaba vac√≠o. Se usaron datos por defecto: {tipo_dato_default}")
                return tipo_dato_default
            archivo.seek(0)
            datos = json.load(archivo)
            logger.info(f"Los datos de {ruta_archivo} se cargaron correctamente.")
            logger.debug(f"Contenido cargado desde {ruta_archivo}: {datos}")
            return datos
    except (json.JSONDecodeError, FileNotFoundError) as e:
        logger.error(f"No se pudo cargar el archivo {ruta_archivo} o est√° corrupto. Se usar√°n datos por defecto.")
        logger.debug(f"Excepci√≥n: {e}")
        print(f"‚ö†Ô∏è No se pudo cargar el archivo {ruta_archivo} o est√° corrupto. Se usar√°n datos por defecto.")
        with open(ruta_archivo, 'w', encoding='utf-8') as archivo_nuevo:
            json.dump(tipo_dato_default, archivo_nuevo, indent=4, ensure_ascii=False)
        return tipo_dato_default

def guardar_datos(ruta_archivo, datos):
    """
    Guarda los datos proporcionados en un archivo JSON.
    """
    try:
        with open(ruta_archivo, 'w', encoding='utf-8') as archivo:
            json.dump(datos, archivo, indent=4, ensure_ascii=False)

        logger.info(f"Los datos de {ruta_archivo} se guardaron correctamente.")
        logger.debug(f"Contenido guardado en {ruta_archivo}: {datos}")
    except IOError as e:
        logger.error(f"Error: No se pudieron guardar los datos en {ruta_archivo}.")
        logger.debug(f"Excepci√≥n al guardar {ruta_archivo}: {e}")
        print(f"‚ùå Error: No se pudieron guardar los datos en {ruta_archivo}.")

def registrar_usuario_en_memoria(email, nombre, contrase√±a, usuarios, sesion_activa, ruta_guardado=RUTA_USUARIOS):
    rol = "cliente"
    usuarios[email] = {
        "nombre": nombre,
        "contrase√±a": contrase√±a,
        "rol": rol,
        "activo": True
    }
    guardar_datos(ruta_guardado, usuarios)
    sesion_activa["email"] = email
    sesion_activa["rol"] = rol
    
# ===============
# Carga de Datos
# ===============
usuarios = cargar_datos(RUTA_USUARIOS, {})
stock = cargar_datos(RUTA_STOCK, {})
precios = cargar_datos(RUTA_PRECIOS, {})
historial_ventas = cargar_datos(RUTA_HISTORIAL_VENTAS, [])
ventas_realizadas = cargar_datos(RUTA_VENTAS_REALIZADAS, [])

sesion_activa = {
    "email": None,
    "rol": None
}

def pedir_input_con_cancelar(mensaje):
    # ingrese usuario: 
    respuesta = input(mensaje).strip()
    if respuesta == "":
        print("‚Ü©Ô∏è Operaci√≥n cancelada.")
        return None
    return respuesta

# VALIDACIONES PARA INICIO DE SESION Y REGISTRO
def es_email_valido(email):
    # Expresi√≥n regular para validar el formato del email
    patron_email = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return re.match(patron_email, email) is not None and email not in usuarios

def es_contrase√±a_valida(contrase√±a):
    # Valida: 6 caracteres o mas, debe contener, mayus, caracter especial
    patron_contrase√±a = r'^(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&()])[A-Za-z\d@$!%*?&()]{6,}$'
    return re.match(patron_contrase√±a, contrase√±a) is not None

def es_email_registrado(email):
    return email in usuarios

def es_contrase√±a_correcta(email, contrase√±a):
    return usuarios[email]["contrase√±a"] == contrase√±a

def obtener_email_valido():
    while True:
        email_input = pedir_input_con_cancelar("Ingres√° tu email: ")
        if email_input is None:
            return None

        email = email_input.lower()

        if email in usuarios:
            print("‚ö†Ô∏è Ya existe un usuario registrado con ese email. Intent√° con otro.")
        elif not es_email_valido(email):
            print("‚ö†Ô∏è El email debe contener '@' y '.'. Intent√° de nuevo.")
            print()
        else:
            return email

def obtener_nombre():
    return pedir_input_con_cancelar("Ingres√° tu nombre completo: ")

def obtener_contrase√±a_confirmada():
    while True:
        contrase√±a = pedir_input_con_cancelar("Ingres√° una contrase√±a (m√≠n. 6 caracteres, 1 may√∫scula, 1 caracter especial): ")
        if contrase√±a is None:
            return None

        if not es_contrase√±a_valida(contrase√±a):
            print("‚ö†Ô∏è La contrase√±a debe tener al menos 6 caracteres, una may√∫scula y un caracter especial.")
            print()
            continue

        confirmar = pedir_input_con_cancelar("Confirm√° la contrase√±a: ")
        if confirmar is None:
            return None

        if contrase√±a == confirmar:
            return contrase√±a
        else:
            print("‚ö†Ô∏è Las contrase√±as no coinciden. Intent√° nuevamente.")

def obtener_email_existente():
    while True:
        email_input = pedir_input_con_cancelar("Ingres√° tu email: ")
        if email_input is None:
            return None

        email = email_input.lower()

        if es_email_registrado(email):
            return email
        else:
            print("‚ö†Ô∏è El email no est√° registrado. Volv√© a intentarlo o registrate.")

def obtener_contrase√±a_para_login(email):
    while True:
        contrase√±a_ingresada = pedir_input_con_cancelar("Ingres√° tu contrase√±a: ")
        if contrase√±a_ingresada is None:
            return None

        if es_contrase√±a_correcta(email, contrase√±a_ingresada):
            return contrase√±a_ingresada
        else:
            print("‚ö†Ô∏è Contrase√±a incorrecta. Volv√© a intentarlo.")

# CREAR, INICIAR SESI√ìN, CERRAR SESI√ìN
def crear_usuario(stock, precios, sesion_activa, historial_ventas, ventas_realizadas):
    print("\n--- Registrarse ---")
    print("(Pod√©s presionar Enter en cualquier momento para cancelar)")

    try:
        email = obtener_email_valido()
        if email is None:
            logger.info("Registro cancelado al ingresar el email.")
            return

        nombre = obtener_nombre()
        if nombre is None:
            logger.info(f"Registro cancelado por el usuario {email} al ingresar el nombre.")
            return

        contrase√±a = obtener_contrase√±a_confirmada()
        if contrase√±a is None:
            logger.info(f"Registro cancelado por el usuario {email} al ingresar la contrase√±a.")
            return

        registrar_usuario_en_memoria(email, nombre, contrase√±a, usuarios, sesion_activa)

        logger.info(f"Usuario {email} redirigido al men√∫ cliente despu√©s del registro.")

        print(f"\n‚úÖ ¬°Registro exitoso para {nombre} como CLIENTE!")
        print(f"‚úÖ ¬°Bienvenido/a, {nombre}!")
        print(f"Rol: {sesion_activa['rol'].capitalize()}")

        menu_cliente(stock, precios, sesion_activa, historial_ventas, ventas_realizadas, email)

    except Exception as e:
        logger.error(f"Error inesperado durante el registro de usuario {email if 'email' in locals() else '[desconocido]'}: {e}")
        print("‚ùå Hubo un error al registrarse. Por favor, intent√° de nuevo.")

def iniciar_sesion():
    print("\n--- Iniciar Sesi√≥n ---")
    print("(Pod√©s presionar Enter en cualquier momento para cancelar)")

    try:
        email = obtener_email_existente()
        if email is None:
            logger.info("Inicio de sesi√≥n cancelado al ingresar el email.")
            return

        contrase√±a = obtener_contrase√±a_para_login(email)
        if contrase√±a is None:
            logger.info(f"Inicio de sesi√≥n cancelado por el usuario {email} al ingresar la contrase√±a.")
            return

        sesion_activa["email"] = email
        sesion_activa["rol"] = usuarios[email]["rol"]

        logger.info(f"Inicio de sesi√≥n exitoso: {email} (rol: {usuarios[email]['rol']})")

        print()
        print(f"‚úÖ ¬°Bienvenido/a, {usuarios[email]['nombre']}!")
        print(f"Rol: {usuarios[email]['rol'].capitalize()}")

        if usuarios[email]["rol"] == "administrador":
            menu_administrador(stock, precios, usuarios, historial_ventas)
        else:
            menu_cliente(stock, precios, sesion_activa, historial_ventas, ventas_realizadas, email)

    except Exception as e:
        logger.error(f"Error inesperado durante el inicio de sesi√≥n: {e}")
        print("‚ùå Hubo un error al iniciar sesi√≥n. Por favor, intent√° de nuevo.")

def cerrar_sesion():
    try:
        if sesion_activa["email"]:
            nombre_usuario = usuarios.get(sesion_activa["email"], {}).get("nombre", sesion_activa["email"])
            print(f"\nüîí Sesi√≥n cerrada para {nombre_usuario}.")
            logger.info(f"Sesi√≥n cerrada para {sesion_activa['email']}.")
            sesion_activa["email"] = None
            sesion_activa["rol"] = None
        else:
            print("\n‚ÑπÔ∏è No hay una sesi√≥n activa para cerrar.")
            logger.info("Se intent√≥ cerrar sesi√≥n sin que haya una sesi√≥n activa.")
    except Exception as e:
        logger.error(f"Error al cerrar sesi√≥n: {e}")
        print("‚ùå Hubo un error al cerrar sesi√≥n.")

# INVENTARIO Y STOCK
def obtener_categorias_con_productos(stock_actual):
    """Devuelve un diccionario con las categor√≠as que tienen productos."""
    return dict(filter(lambda item: len(item[1]) > 0, stock_actual.items()))

def formatear_encabezado_categoria(categoria):
    return [
        f"üìÅ Categor√≠a: {categoria.capitalize()}",
        f"    {'Producto':<25} | {'Stock':<12} | {'Precio':<10}",
        "    " + "-" * 50
    ]

def formatear_linea_producto(producto, cantidad, precio):
    stock_str = "Sin stock" if cantidad <= 0 else str(cantidad)
    precio_str = f"${precio:.2f}" if precio is not None else "No definido"
    return f"    - {producto.capitalize():<24} | {stock_str:<12} | {precio_str:<10}"

def obtener_lineas_categoria(categoria, productos, precios_categoria):
    lineas = formatear_encabezado_categoria(categoria)
    for producto, cantidad in sorted(productos.items()):
        precio = precios_categoria.get(producto.lower())
        linea = formatear_linea_producto(producto, cantidad, precio)
        lineas.append(linea)
    lineas.append("-" * 40)
    return lineas

def mostrar_stock_detallado(stock_actual, precios_actuales):
    print("\nüì¶ Inventario Actual:")
    print("-" * 70)

    if not stock_actual:
        print("El inventario de stock est√° vac√≠o.")
        print("-" * 70)
        return

    categorias_con_productos = stock_actual

    if not categorias_con_productos:
        print("No hay categor√≠as con productos para mostrar.")
        print("-" * 70)
        return

    for categoria, productos in sorted(categorias_con_productos.items()):
        precios_categoria = precios_actuales.get(categoria, {})
        lineas = obtener_lineas_categoria(categoria, productos, precios_categoria)
        for linea in lineas:
            print(linea)

    print("-" * 70)

def obtener_categorias_validas(stock_disponible):
    return {
        cat: productos for cat, productos in stock_disponible.items()
        if any(cantidad > 0 for cantidad in productos.values())
    }

def mostrar_categorias_disponibles(lista_categorias):
    for i, cat_key in enumerate(lista_categorias):
        print(f"{i + 1}) {cat_key.capitalize()}")
    print(f"\n{len(lista_categorias) + 1}) ‚úÖ Finalizar compra y ver carrito")
    print(f"{len(lista_categorias) + 2}) ‚ùå Cancelar compra y volver al men√∫")

def interpretar_opcion_categoria(opcion, lista_categorias):
    if 1 <= opcion <= len(lista_categorias):
        return lista_categorias[opcion - 1]
    elif opcion == len(lista_categorias) + 1:
        return "FINALIZAR_COMPRA"
    elif opcion == len(lista_categorias) + 2:
        return "CANCELAR_COMPRA_TOTAL"
    else:
        print("‚ö†Ô∏è Opci√≥n de categor√≠a inv√°lida. Intent√° de nuevo.")
        return None

def seleccionar_categoria_para_compra(stock_disponible):
    print("\nüõí ¬øDe qu√© categor√≠a te gustar√≠a comprar?")

    categorias_validas = obtener_categorias_validas(stock_disponible)

    if not categorias_validas:
        print("‚ÑπÔ∏è Lo sentimos, no hay productos disponibles en este momento.")
        return "CANCELAR_COMPRA_TOTAL"

    lista_categorias_mostrables = sorted(categorias_validas.keys())

    mostrar_categorias_disponibles(lista_categorias_mostrables)

    while True:
        try:
            opcion_str = pedir_input_con_cancelar("\n‚Üí Eleg√≠ una opci√≥n de categor√≠a (o Enter para cancelar esta selecci√≥n): ")
            if opcion_str is None:
                return "VOLVER_MENU_CLIENTE"
            if not opcion_str:
                continue
            opcion = int(opcion_str)

            resultado = interpretar_opcion_categoria(opcion, lista_categorias_mostrables)
            if resultado is not None:
                return resultado

        except ValueError:
            print("‚ö†Ô∏è Entrada inv√°lida. Por favor, ingres√° un n√∫mero.")

def obtener_productos_con_stock(productos_en_categoria):
    return {
        prod: stock_val for prod, stock_val in productos_en_categoria.items() if stock_val > 0
    }

def mostrar_lista_productos(productos_mostrables, precios_categoria):
    lista_productos = sorted(productos_mostrables.keys())
    for i, prod_key in enumerate(lista_productos):
        precio_unitario = precios_categoria.get(prod_key.lower(), 0.0)
        stock_actual = productos_mostrables[prod_key]
        print(f"  {i + 1}) {prod_key.capitalize()} (Stock: {stock_actual}, Precio: ${precio_unitario:.2f})")
    return lista_productos

def mostrar_opcion_volver(indice):
    print(f"\n  {indice}) ‚Ü©Ô∏è Volver a elegir categor√≠a")

def seleccionar_producto_para_compra(categoria_key, productos_en_categoria, precios_categoria):
    """
    Muestra productos de una categor√≠a con stock y permite al cliente seleccionar uno.
    """
    print(f"\n üõí Productos disponibles en '{categoria_key.capitalize()}':")
    productos_mostrables = obtener_productos_con_stock(productos_en_categoria)

    if not productos_mostrables:
        print(f"‚ÑπÔ∏è No quedan productos con stock en la categor√≠a '{categoria_key.capitalize()}'.")
        return None

    lista_productos_mostrables = mostrar_lista_productos(productos_mostrables, precios_categoria)
    mostrar_opcion_volver(len(lista_productos_mostrables) + 1)

    while True:
        try:
            opcion_str = pedir_input_con_cancelar("  ‚Üí Eleg√≠ el producto (o Enter para volver a categor√≠as): ")
            if opcion_str is None:
                return None  # Volver a categor√≠as
            if not opcion_str:
                continue
            opcion = int(opcion_str)

            if 1 <= opcion <= len(lista_productos_mostrables):
                return lista_productos_mostrables[opcion - 1]
            elif opcion == len(lista_productos_mostrables) + 1:
                return None  # Volver a categor√≠as
            else:
                print("‚ö†Ô∏è Opci√≥n de producto inv√°lida. Intent√° de nuevo.")
        except ValueError:
            print("‚ö†Ô∏è Entrada inv√°lida. Por favor, ingres√° un n√∫mero.")

def validar_cantidad(cantidad_str, stock_para_agregar):
    try:
        if cantidad_str is None:
            return -1
        if not cantidad_str:
            return "continuar"
        cantidad = int(cantidad_str)

        if cantidad == 0:
            return 0
        if cantidad < 0:
            print("‚ö†Ô∏è La cantidad no puede ser negativa.")
            return "continuar"
        if cantidad > stock_para_agregar:
            print(f"‚ö†Ô∏è No pod√©s agregar m√°s de {stock_para_agregar} unidades.")
            return "continuar"
        return cantidad
    except ValueError:
        print("‚ö†Ô∏è Ingresaste algo que no es un n√∫mero.")
        return "continuar"

def solicitar_cantidad_producto(producto_key, stock_disponible_real, cantidad_en_carrito_actual):
    """
    Pide al cliente la cantidad de un producto, validando contra el stock disponible.
    """
    stock_para_agregar = stock_disponible_real
    if stock_para_agregar <= 0:
        print(f"‚ÑπÔ∏è Ya no hay m√°s stock disponible para agregar de '{producto_key.capitalize()}' (o ya est√° todo en tu carrito).")
        return 0

    while True:
        cantidad_str = pedir_input_con_cancelar(f"  ‚Üí ¬øCu√°ntas unidades quer√©s agregar? (0 para no agregar, Enter para cancelar selecci√≥n de cantidad): ")
        resultado = validar_cantidad(cantidad_str, stock_para_agregar)

        if resultado == "continuar":
            continue
        return resultado

def calcular_subtotal(cantidad, precio_unitario):
    return cantidad * precio_unitario

def armar_item_para_historial(categoria, producto, cantidad, precio_unitario, subtotal):
    return {
        "categoria": categoria,
        "producto": producto,
        "cantidad": cantidad,
        "precio_unitario": precio_unitario,
        "subtotal": subtotal
    }

def calcular_costo_total(items_historial):
    return reduce(lambda acc, item: acc + item['subtotal'], items_historial, 0.0)

def mostrar_encabezado():
    print("-" * 70)
    print(f"{'Producto (Categor√≠a)':<35} | {'Cantidad':<10} | {'P. Unit.':<10} | {'Subtotal':<10}")
    print("-" * 70)

def mostrar_linea_producto(producto_display, categoria_display, cantidad, precio_unitario, subtotal):
    print(f"- {producto_display:<25} ({categoria_display}) | {cantidad:<10} | ${precio_unitario:<9.2f} | ${subtotal:<9.2f}")

def mostrar_pie_resumen(costo_total):
    print("-" * 70)
    print(f"{'Costo Total:':<58} ${costo_total:.2f}")
    print("-" * 70)

def mostrar_resumen_carrito_modificado(carrito_actual_cliente):
    """
    Muestra el resumen del carrito y calcula el costo total.
    """
    if not carrito_actual_cliente:
        print("El carrito est√° vac√≠o.")
        return 0.0, []

    mostrar_encabezado()
    items_para_historial = []

    for clave_carrito, detalles_item in sorted(carrito_actual_cliente.items()):
        categoria, producto_original = clave_carrito.split(":", 1)
        cantidad = detalles_item["cantidad"]
        precio_unitario = detalles_item["precio_unitario_registrado"]
        subtotal = calcular_subtotal(cantidad, precio_unitario)

        producto_display = detalles_item.get("producto_display", producto_original.capitalize())
        categoria_display = detalles_item.get("categoria_display", categoria.capitalize())

        logger.debug(f"Subtotal para '{producto_display}' ({cantidad} uds. x ${precio_unitario:.2f}) = ${subtotal:.2f}")

        items_para_historial.append(
            armar_item_para_historial(categoria, producto_original, cantidad, precio_unitario, subtotal)
        )

        mostrar_linea_producto(producto_display, categoria_display, cantidad, precio_unitario, subtotal)

    costo_total_venta = calcular_costo_total(items_para_historial) if items_para_historial else 0.0
    logger.debug(f"Costo total del carrito para resumen: ${costo_total_venta:.2f}")
    
    mostrar_pie_resumen(costo_total_venta)
    return costo_total_venta, items_para_historial

def actualizar_stock(carrito_actual, stock):
    for clave_carrito, detalles_item_carrito in carrito_actual.items():
        categoria, producto_original = clave_carrito.split(":", 1)
        cantidad_comprada = detalles_item_carrito["cantidad"]

        if categoria in stock and producto_original in stock[categoria]:
            stock[categoria][producto_original] -= cantidad_comprada

            logger.debug(
                f"Stock actualizado: '{producto_original}' en '{categoria}' -{cantidad_comprada} uds. ‚Üí Nuevo stock: {stock[categoria][producto_original]}"
            )

            if stock[categoria][producto_original] < 0:
                print(f"‚ö†Ô∏è ADVERTENCIA: Stock negativo para {producto_original} en {categoria}. Corrigiendo a 0.")
                logger.error(
                    f"Stock negativo detectado para '{producto_original}' en '{categoria}'. Ajustado a 0."
                )
                stock[categoria][producto_original] = 0
        else:
            print(f"‚ö†Ô∏è ADVERTENCIA CR√çTICA: El producto '{producto_original}' de la categor√≠a '{categoria}' no fue encontrado en el stock para actualizar.")
            logger.error(
                f"Producto no encontrado en stock al actualizar: '{producto_original}' en '{categoria}'."
            )

    return stock

def confirmar_compra():
    while True:
        confirmacion = input("\n¬øConfirm√°s la compra? (s/n): ").strip().lower()
        if confirmacion in ['s', 'n']:
            return confirmacion == 's'
        print("‚ö†Ô∏è Por favor, ingres√° 's' para s√≠ o 'n' para no.")

# VENTAS
def procesar_venta(email_cliente, items_para_historial, costo_total_venta, historial_ventas, ventas_realizadas, guardar_datos_func, rutas):
    try:
        venta_registrada = {
            "cliente_email": email_cliente,
            "items": items_para_historial,
            "costo_total": costo_total_venta,
        }

        historial_ventas.append(venta_registrada)
        guardar_datos_func(rutas["historial_ventas"], historial_ventas)

        ventas_realizadas.append({"subtotal": costo_total_venta})
        guardar_datos_func(rutas["ventas_realizadas"], ventas_realizadas)

        logger.info(f"Venta procesada correctamente para {email_cliente}. Total: ${costo_total_venta:.2f}")
    
    except Exception as e:
        logger.error(f"Error al procesar la venta para {email_cliente}: {e}")

def confirmar_y_procesar_venta(
    carrito_actual,
    email_cliente,
    stock,
    precios,
    historial_ventas,
    ventas_realizadas,
    guardar_datos_func=guardar_datos,
    rutas={
        "stock": RUTA_STOCK,
        "ventas_realizadas": RUTA_VENTAS_REALIZADAS,
        "historial_ventas": RUTA_HISTORIAL_VENTAS
    },
    mostrar_resumen_func=mostrar_resumen_carrito_modificado,
    confirmar_func=confirmar_compra  
):
    try:
        if not carrito_actual:
            print("\n‚ÑπÔ∏è Tu carrito est√° vac√≠o. No se proces√≥ ninguna compra.")
            logger.info(f"Compra no procesada: carrito vac√≠o para {email_cliente}.")
            logger.debug(f"Carrito recibido: {carrito_actual}")
            return False

        print("\nüìã --- Resumen Final de tu Carrito ---")
        costo_total_venta, items_para_historial = mostrar_resumen_func(carrito_actual)

        logger.debug(f"Resumen generado - Total: {costo_total_venta}, Items: {items_para_historial}")

        if not items_para_historial and costo_total_venta == 0:
            print("‚ÑπÔ∏è No se pudo procesar el resumen del carrito. Compra no finalizada.")
            logger.info(f"Resumen del carrito inv√°lido para {email_cliente}. No se finaliz√≥ la compra.")
            return False

        if confirmar_func():
            logger.debug("El usuario confirm√≥ la compra.")
            stock_actualizado = actualizar_stock(carrito_actual, stock)
            logger.debug(f"Stock actualizado: {stock_actualizado}")

            guardar_datos_func(rutas["stock"], stock_actualizado)
            logger.debug("Stock guardado correctamente.")

            procesar_venta(
                email_cliente,
                items_para_historial,
                costo_total_venta,
                historial_ventas,
                ventas_realizadas,
                guardar_datos_func,
                rutas
            )

            logger.info(f"Compra confirmada por {email_cliente}. Total: ${costo_total_venta:.2f}")
            print("\n‚úÖ ¬°Gracias por tu compra!")
            return True
        else:
            print("\n‚ùå Compra cancelada.")
            logger.info(f"Compra cancelada por el usuario: {email_cliente}")
            return False

    except Exception as e:
        logger.error(f"Error durante el proceso de confirmaci√≥n de compra para {email_cliente}: {e}")
        print("‚ùå Ocurri√≥ un error al procesar tu compra.")
        return False

def copiar_stock(stock_original):
    stock_copia = {}
    for categoria, productos in stock_original.items():
        stock_copia[categoria] = {}
        for producto, cantidad in productos.items():
            stock_copia[categoria][producto] = cantidad
    return stock_copia

def ventas_reestructurada(stock, precios, sesion_activa, historial_ventas, ventas_realizadas):
    carrito_cliente = {}
    stock_temp = copiar_stock(stock)
    seguir_comprando = True

    while seguir_comprando:
        mostrar_inicio_tienda(stock_temp, precios)

        accion_categoria = seleccionar_categoria_para_compra(stock_temp)

        seguir_comprando = not manejar_accion_categoria(accion_categoria, carrito_cliente, sesion_activa, precios, historial_ventas, ventas_realizadas, stock)

        if seguir_comprando:
            categoria_elegida = accion_categoria
            producto_elegido_key = seleccionar_producto_para_compra(categoria_elegida, stock_temp[categoria_elegida], precios.get(categoria_elegida, {}))

            if producto_elegido_key is not None:
                manejar_agregado_producto_al_carrito(carrito_cliente, categoria_elegida, producto_elegido_key, stock_temp, precios)
                mostrar_carrito_actual(carrito_cliente)

                seguir_comprando = manejar_opcion_post_agregado(carrito_cliente, sesion_activa, precios, historial_ventas, ventas_realizadas, stock)

    print("\nüëã Saliendo del sistema de compras.")

def mostrar_inicio_tienda(stock, precios):
    print("\n" + "="*15 + " TIENDA VIRTUAL " + "="*15)
    mostrar_stock_detallado(stock, precios)

def manejar_accion_categoria(accion_categoria, carrito_cliente, sesion_activa, precios, historial_ventas, ventas_realizadas, stock_real):
    if accion_categoria == "CANCELAR_COMPRA_TOTAL":
        print("\n‚Ü©Ô∏è Compra cancelada. Volviendo al men√∫ principal del cliente...")
        return True
    elif accion_categoria == "VOLVER_MENU_CLIENTE":
        print("\n‚Ü©Ô∏è Volviendo al men√∫ del cliente...")
        return True
    elif accion_categoria == "FINALIZAR_COMPRA":
        if confirmar_y_procesar_venta(carrito_cliente, sesion_activa["email"], stock_real, precios, historial_ventas, ventas_realizadas):
            carrito_cliente.clear()
        if not carrito_cliente or input("¬øDesea realizar otra compra o agregar m√°s √≠tems? (s/n): ").lower() != 's':
            return True
    elif accion_categoria is None:
        return True
    return False

def manejar_agregado_producto_al_carrito(
    carrito_cliente, categoria, producto_key, stock, precios,
    solicitar_cantidad_fn=solicitar_cantidad_producto
):
    try:
        stock_disponible = stock[categoria][producto_key]
        clave_carrito = f"{categoria}:{producto_key}"
        cantidad_actual = carrito_cliente.get(clave_carrito, {}).get("cantidad", 0)

        cantidad_a_agregar = solicitar_cantidad_fn(producto_key, stock_disponible, cantidad_actual)

        if cantidad_a_agregar > 0:
            precio_unitario = precios.get(categoria, {}).get(producto_key, precios.get(categoria, {}).get(producto_key.lower(), 0.0))
            carrito_cliente[clave_carrito] = {
                "cantidad": cantidad_actual + cantidad_a_agregar,
                "precio_unitario_registrado": precio_unitario,
                "producto_display": producto_key.capitalize(),
                "categoria_display": categoria.capitalize()
            }
            stock[categoria][producto_key] -= cantidad_a_agregar
            logger.info(f"'{producto_key}' agregado al carrito ({cantidad_a_agregar} uds.) - Categor√≠a: {categoria}")
            print(f"‚úÖ '{producto_key.capitalize()}' ({cantidad_a_agregar} uds.) agregado/actualizado en el carrito.")
        
        elif cantidad_a_agregar == -1:
            logger.info(f"Adici√≥n cancelada por el usuario para el producto '{producto_key}' en la categor√≠a '{categoria}'.")
            print(f"‚ÑπÔ∏è Adici√≥n de '{producto_key.capitalize()}' cancelada.")

    except Exception as e:
        logger.error(f"Error al agregar '{producto_key}' al carrito (categor√≠a: {categoria}): {e}")
        print(f"‚ùå Error al agregar '{producto_key.capitalize()}' al carrito.")

def mostrar_carrito_actual(carrito):
    if carrito:
        print("\nüõí Carrito Actual:")
        for clave, item in carrito.items():
            cat, prod = clave.split(":", 1)
            print(f"  - {item.get('producto_display', prod.capitalize())} ({item.get('categoria_display', cat.capitalize())}): {item['cantidad']} uds.")
        print("-" * 20)
    else:
        print("\nüõí Tu carrito est√° vac√≠o.")

def manejar_opcion_post_agregado(carrito, sesion, precios, historial, ventas, stock_real):
    while True:
        op = input("¬øDesea (a)gregar otro producto, (f)inalizar compra, o (c)ancelar toda la compra? (a/f/c): ").strip().lower()
        if op == 'a':
            return True
        elif op == 'f':
            if confirmar_y_procesar_venta(carrito, sesion["email"], stock_real, precios, historial, ventas):
                carrito.clear()
            print("\n‚Ü©Ô∏è Volviendo al men√∫ del cliente...")
            return False
        elif op == 'c':
            print("\n‚Ü©Ô∏è Compra totalmente cancelada. Volviendo al men√∫ del cliente...")
            return False
        else:
            print("‚ö†Ô∏è Opci√≥n inv√°lida.")
            return None

def mostrar_historial_compras(compras, email):
    """Imprime todas las compras del cliente."""
    print(f"\n--- Historial de Compras para {usuarios[email]['nombre']} ---")
    for i, venta in enumerate(compras, start=1):
        mostrar_venta_individual(venta, i)
    print("-" * 60)
    print("\n--- Fin del Historial de Compras ---")

def mostrar_venta_individual(venta, numero):
    """Muestra una sola venta en formato detallado."""
    print("-" * 60)
    print(f"| Compra #{numero}|")
    print("Items Comprados:")
    if 'items' in venta and venta['items']:
        print(f"  {'Producto (Categor√≠a)':<30} | {'Cant.':<5} | {'P.Unit':<10} | {'Subtotal':<10}")
        print("  " + "-" * 60)
        for item in venta['items']:
            mostrar_item_historial(item)
    else:
        print("  (No hay detalle de items)")
    print(f"Costo Total Venta: ${venta.get('costo_total', 0.0):.2f}")

# GESTI√ìN DE CUENTA DEL CLIENTE
def cuenta_cliente(email):
    '''
    Men√∫ de gesti√≥n de cuenta del cliente con opciones para administrar su cuenta
    '''
    usuario = usuarios.get(email)
    if not usuario:
        print("‚ùå Usuario no encontrado")
        return

    while True:
        print(f"\n--- GESTI√ìN DE CUENTA ({usuario['nombre']}) ---")
        print("1. Cambiar contrase√±a")
        print("2. Actualizar nombre")
        print("3. Volver al men√∫ principal")
        
        opcion = input("Seleccione una opci√≥n: ").strip()
        
        if opcion == "1":
            cambiar_contrasena(email)
        elif opcion == "2":
            actualizar_nombre(email)
        elif opcion == "3":
            print("‚Ü©Ô∏è Volviendo al men√∫ principal...")
            return
        else:
            print("‚ö†Ô∏è Opci√≥n inv√°lida. Intente nuevamente.")

def menu_cliente(stock, precios, sesion_activa, historial_ventas, ventas_realizadas, email):

    ejecutando_cliente = True
    while ejecutando_cliente:
        print("\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ MEN√ö CLIENTE ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
        print(f"Bienvenido/a {usuarios.get(sesion_activa['email'], {}).get('nombre', 'Cliente')}")
        print("1) Ver productos")
        print("2) Realizar compra")
        print("3) Ver mis compras (historial)")
        print("4) Administrar cuenta")
        print("5) Cerrar sesi√≥n")

        opcion = input("\n‚Üí Ingres√° el n√∫mero de la opci√≥n: ").strip()

        if opcion == "1":
            mostrar_stock_detallado(stock, precios)
        elif opcion == "2":
            ventas_reestructurada(stock, precios, sesion_activa, historial_ventas, ventas_realizadas) 
        elif opcion == "3":
            ver_historial_compras_cliente()
        elif opcion == "4":
            cuenta_cliente(email)
        elif opcion == "5":
            cerrar_sesion()
            ejecutando_cliente = False
        else:
            print("‚ö†Ô∏è Opci√≥n inv√°lida. Intent√° nuevamente.")

def ver_historial_compras_cliente():
    """Muestra el historial de compras para el cliente actualmente logueado."""
    if not sesion_activa["email"]:
        print("‚ö†Ô∏è Debes iniciar sesi√≥n para ver tu historial de compras.")
        return

    email_cliente_actual = sesion_activa["email"]
    compras_cliente = obtener_compras_cliente(email_cliente_actual)

    if not compras_cliente:
        print("\n‚ÑπÔ∏è A√∫n no has realizado ninguna compra.")
        return

    mostrar_historial_compras(compras_cliente, email_cliente_actual)

def obtener_compras_cliente(email):
    """Devuelve la lista de compras realizadas por el cliente."""
    return [venta for venta in historial_ventas if venta.get("cliente_email") == email]

def mostrar_item_historial(item):
    """Muestra un √≠tem dentro de una venta."""
    prod_cat = f"{item.get('producto', '?').capitalize()} ({item.get('categoria', '?').capitalize()})"
    cant = item.get('cantidad', 0)
    p_unit = item.get('precio_unitario', 0.0)
    subt = item.get('subtotal', 0.0)
    print(f"  - {prod_cat:<29} | {cant:<5} | ${p_unit:<9.2f} | ${subt:<9.2f}")

def menu_administrador(stock, precios, usuarios, historial_ventas):
    ejecutando_admin = True
    while ejecutando_admin:
        print("\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ MEN√ö ADMINISTRADOR ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
        print(f"Sesi√≥n: {usuarios.get(sesion_activa['email'], {}).get('nombre', 'Admin')}")

        print("\n---- GESTI√ìN DE USUARIOS ----")
        print("1) Ver clientes")
        print("2) Ver administradores")
        print("3) Gestionar clientes")
        print("4) Gestionar administradores")
        print("5) Crear nuevo administrador")
        print("6) Ver clientes eliminados")
        print("7) Ver administradores eliminados")

        print("\n---- GESTI√ìN DE PRODUCTOS ----")
        print("8) Gestionar Inventario (Stock y Precios)")

        print("\n---- REPORTES ----")
        print("9) Ver historial de todas las ventas")
        print("10) Consultar porcentaje de cumplimiento de objetivo")

        print("\n---- SESI√ìN ----")
        print("11) Cerrar sesi√≥n")

        opcion = input("\n‚Üí Ingres√° el n√∫mero de la opci√≥n: ").strip()

        if opcion == "1":
            ver_usuarios_por_rol("cliente")
        elif opcion == "2":
            ver_usuarios_por_rol("administrador")
        elif opcion == "3":
            gestionar_clientes(usuarios, guardar_datos, RUTA_USUARIOS)
        elif opcion == "4":
            gestionar_administradores()
        elif opcion == "5":
            crear_nuevo_administrador()
        elif opcion == "6":
            ver_clientes_inactivos("cliente", usuarios)
        elif opcion == "7":
            ver_administradores_inactivos("administrador", usuarios)
        elif opcion == "8":
            administrar_inventario_menu(stock, precios)
        elif opcion == "9":
            ver_historial_ventas_admin(historial_ventas)
        elif opcion == "10":
            porcentaje_objetivo_ganancias(ventas_realizadas)
        elif opcion == "11":
            cerrar_sesion()
            ejecutando_admin = False
        else:
            print("‚ö†Ô∏è Opci√≥n inv√°lida. Intent√° nuevamente.")

def ver_usuarios_por_rol(rol):
    print(f"\n--- Lista de Usuarios con Rol: {rol.capitalize()} ---")
    try:
        encontrados = False
        for email, data in usuarios.items():
            if data.get("rol") == rol and data.get("activo", True):
                print(f"- Email: {email}, Nombre: {data.get('nombre', 'N/A')}")
                encontrados = True

        if not encontrados:
            print("‚ÑπÔ∏è No se encontraron usuarios con ese rol.")
            logger.info(f"No se encontraron usuarios con el rol: {rol}")
        else:
            logger.info(f"Se consultaron usuarios con rol: {rol}")

    except Exception as e:
        logger.error(f"Error al consultar usuarios por rol: {rol}: {e}")
        print("‚ùå Ocurri√≥ un error al consultar los usuarios.")

def ver_historial_ventas_admin(historial_a_mostrar):
    print("\n--- Historial Completo de Ventas (Admin) ---")

    if not historial_a_mostrar:
        print("‚ö†Ô∏è A√∫n no se han registrado ventas.")
        return

    ventas_por_pagina = 3
    total_ventas = len(historial_a_mostrar)
    pagina_actual = 1
    salir = False

    while not salir:
        inicio, _ = calcular_indices_paginacion(pagina_actual, ventas_por_pagina)
        if inicio >= total_ventas:
            if pagina_actual > 1:
                pagina_actual -= 1
            else:
                salir = True
                continue

        mostrar_pagina(historial_a_mostrar, pagina_actual, ventas_por_pagina)
        accion = obtener_opcion_navegacion()

        if accion == 'q':
            salir = True
        else:
            pagina_actual = actualizar_pagina_actual(accion, pagina_actual, total_ventas, ventas_por_pagina)

    print("\n--- Fin del Historial de Ventas (Admin) ---")

#  ADMINISTRACI√ìN PROPIA PARA EL CLIENTE
def cambiar_contrasena(email):
    """Cambia la contrase√±a del usuario con validaci√≥n"""
    print("\n--- CAMBIAR CONTRASE√ëA ---")
    contrase√±a_valida = False
    
    try:
        while not contrase√±a_valida:
            nueva_contrase√±a = input("Nueva contrase√±a (m√≠n. 6 caracteres, 1 may√∫scula, 1 caracter especial): ").strip()
            if not nueva_contrase√±a:
                print("‚Ü©Ô∏è Operaci√≥n cancelada")
                logger.info(f"Cambio de contrase√±a cancelado para {email}")
                return

            if len(nueva_contrase√±a) < 6 or not any(c.isupper() for c in nueva_contrase√±a):
                print("‚ùå La contrase√±a debe tener al menos 6 caracteres, una may√∫scula y un caracter especial.")
                logger.debug(f"Intento de contrase√±a inv√°lida para {email}")
                continue

            confirmacion = input("Confirmar nueva contrase√±a: ").strip()
            if nueva_contrase√±a != confirmacion:
                print("‚ùå Las contrase√±as no coinciden")
                logger.debug(f"Confirmaci√≥n de contrase√±a fallida para {email}")
            else:
                contrase√±a_valida = True

        usuarios[email]["contrase√±a"] = nueva_contrase√±a
        guardar_datos(RUTA_USUARIOS, usuarios)
        print("‚úÖ Contrase√±a actualizada exitosamente")
        logger.info(f"Contrase√±a actualizada correctamente para {email}")

    except Exception as e:
        logger.error(f"Error inesperado al cambiar contrase√±a para {email}: {e}")
        print("‚ùå Ocurri√≥ un error al actualizar la contrase√±a.")

def actualizar_nombre(email):
    """Actualiza el nombre del usuario"""
    print("\n--- ACTUALIZAR NOMBRE ---")

    try:
        while True:
            nuevo_nombre = input("Nuevo nombre completo: ").strip()
            if not nuevo_nombre:
                print("‚Ü©Ô∏è Operaci√≥n cancelada")
                logger.info(f"Actualizaci√≥n de nombre cancelada para {email}")
                return
                
            usuarios[email]["nombre"] = nuevo_nombre
            guardar_datos(RUTA_USUARIOS, usuarios)
            print(f"‚úÖ Nombre actualizado a: {nuevo_nombre}")
            logger.info(f"Nombre actualizado para {email}: {nuevo_nombre}")
            return
    except Exception as e:
        logger.error(f"Error al actualizar nombre para {email}: {e}")
        print("‚ùå Ocurri√≥ un error al actualizar el nombre.")

# CREAR ADMINISTRADOR
def solicitar_email_valido():
    while True:
        email = input("Ingres√° el email del nuevo administrador: ").strip().lower()

        if "@" not in email or "." not in email:
            print("‚ö†Ô∏è El formato del email es inv√°lido (falta @ o .)")
        elif not es_email_valido(email): 
            print("‚ö†Ô∏è Ese email ya est√° registrado.")
        else:
            return email

def solicitar_nombre_valido():
    while True:
        nombre = input("Ingres√° el nombre completo del nuevo administrador: ").strip()
        if nombre:
            return nombre
        print("‚ö†Ô∏è El nombre no puede estar vac√≠o.")

def solicitar_contrase√±a_valida():
    while True:
        contrase√±a = input("Ingres√° una contrase√±a para el nuevo administrador: ").strip()
        if es_contrase√±a_valida(contrase√±a):
            return contrase√±a
        print("‚ö†Ô∏è La contrase√±a debe tener al menos 6 caracteres, una may√∫scula y un caracter especial.")

def crear_nuevo_administrador():
    print("\n--- Crear Nuevo Administrador ---")

    try:
        email = solicitar_email_valido()
        nombre = solicitar_nombre_valido()
        contrase√±a = solicitar_contrase√±a_valida()

        if email in usuarios:
            logger.warning(f"Intento de crear un administrador con email ya existente: {email}")

        usuarios[email] = {
            "nombre": nombre,
            "contrase√±a": contrase√±a,
            "rol": "administrador",
            "activo": True
        }

        guardar_datos(RUTA_USUARIOS, usuarios)
        print(f"‚úÖ Administrador '{nombre}' creado exitosamente.")
        logger.info(f"Administrador creado: {email} ({nombre})")

    except Exception as e:
        logger.error(f"Error al guardar nuevo administrador {email}: {e}")
        print("‚ùå Ocurri√≥ un error al crear el nuevo administrador.")

def administrar_inventario_menu(stock, precios):
    """Submen√∫ para la gesti√≥n de stock y precios."""

    while True:
        print("\n--- GESTIONAR INVENTARIO (STOCK Y PRECIOS) ---")
        print("1) Ver inventario detallado")
        print("2) Agregar nueva categor√≠a")
        print("3) Agregar nuevo producto a categor√≠a existente")
        print("4) Modificar stock de un producto existente")
        print("5) Modificar precio de un producto existente")
        print("6) Eliminar producto")
        print("7) Eliminar categor√≠a (¬°cuidado, elimina todos sus productos!)")
        print("8) Volver al men√∫ de administrador")

        opcion_inv = input("\n‚Üí Ingres√° tu opci√≥n: ").strip()

        if opcion_inv == "1":
            mostrar_stock_detallado(stock, precios)
        elif opcion_inv == "2":
            agregar_categoria_inventario(stock, precios)
        elif opcion_inv == "3":
            agregar_producto_inventario(stock, precios)
        elif opcion_inv == "4":
            modificar_stock_producto(stock)
        elif opcion_inv == "5":
            modificar_precio_producto(precios)
        elif opcion_inv == "6":
            eliminar_producto_inventario(stock, precios)
        elif opcion_inv == "7":
            eliminar_categoria_inventario(stock, precios)
        elif opcion_inv == "8":
            break
        else:
            print("‚ö†Ô∏è Opci√≥n inv√°lida.")

# GESTIONAR CLIENTES
def gestionar_clientes(usuarios, guardar_datos, ruta):
    print("\n‚îÄ‚îÄ‚îÄ Gestionar Clientes ‚îÄ‚îÄ‚îÄ")
    print()
    ver_usuarios_por_rol("cliente")
    while True:
        nombre_a_buscar = input("Ingres√° el nombre o parte del nombre del cliente (Enter para volver al men√∫): ").strip().lower()
        if not nombre_a_buscar:
            print("‚Ü©Ô∏è Volviendo al men√∫.")
            return

        encontrados = buscar_clientes_por_nombre(nombre_a_buscar, usuarios)

        if encontrados:
            email, nombre = seleccionar_cliente(encontrados)
            if not email:
                return

            mostrar_datos_cliente(email, nombre)
            print("\n¬øQu√© dese√°s hacer?")
            print("1) Eliminar cliente")
            print("2) Volver al men√∫")
            opcion = input("\n‚Üí Ingres√° el n√∫mero de la opci√≥n: ").strip()
            if opcion == "1":
                eliminar_usuario_logicamente(email, nombre, usuarios, guardar_datos, RUTA_USUARIOS)
            elif opcion == "2":
                print("‚Ü©Ô∏è Volviendo al men√∫.")
            else:
                print("‚ö†Ô∏è Opci√≥n inv√°lida. Volviendo al men√∫.")
            return  # Sale despu√©s de operar sobre un cliente
        else:
            print("‚ö†Ô∏è No se encontr√≥ ning√∫n cliente con ese nombre. Intent√° nuevamente.")

def buscar_clientes_por_nombre(nombre_buscado, usuarios):
    nombre_buscado = nombre_buscado.strip().lower()
    return [(email, datos["nombre"]) for email, datos in usuarios.items()
            if datos.get("rol") == "cliente" and nombre_buscado in datos.get("nombre", "").lower()]

def seleccionar_cliente(encontrados):
    if len(encontrados) == 1:
        return encontrados[0]

    print("\n‚úÖ Clientes encontrados:")
    for i, (email, nombre) in enumerate(encontrados, start=1):
        print(f"{i}) Nombre: {nombre} | Email: {email}")

    while True:
        try:
            seleccion_str = input("\n‚Üí Ingres√° el n√∫mero del cliente que quer√©s gestionar (0 para cancelar): ")
            if not seleccion_str.strip():
                print("‚Ü©Ô∏è Selecci√≥n cancelada. Volviendo al men√∫.")
                return None, None
            seleccion = int(seleccion_str)
            if seleccion == 0:
                print("‚Ü©Ô∏è Volviendo al men√∫.")
                return None, None
            if 1 <= seleccion <= len(encontrados):
                return encontrados[seleccion - 1]
            else:
                print("‚ö†Ô∏è N√∫mero inv√°lido. Intent√° nuevamente.")
        except ValueError:
            print("‚ö†Ô∏è Ingresaste algo que no es un n√∫mero. Intent√° nuevamente.")

def mostrar_datos_cliente(email, nombre):
    print(f"\nüìÑ Datos del cliente:")
    print(f"- Nombre: {nombre}")
    print(f"- Email: {email}")
    print(f"- Rol: Cliente")

# GESTIONAR ADMINISTRADORES
def gestionar_administradores():
    print("\n‚îÄ‚îÄ‚îÄ Gestionar Administradores ‚îÄ‚îÄ‚îÄ")
    ver_usuarios_por_rol("administrador")
    print()
    nombre = input("Ingres√° el nombre o parte del nombre del administrador: ").strip().lower()
    if not nombre:
        print("‚ÑπÔ∏è B√∫squeda cancelada. No se ingres√≥ un nombre.")
        return

    encontrados = buscar_administradores(nombre, usuarios)
    if not encontrados:
        print("‚ö†Ô∏è No se encontr√≥ ning√∫n administrador con ese nombre.")
        return

    email, nombre = seleccionar_administrador(encontrados)
    if not email:
        return

    print(f"\nüìÑ Datos del administrador seleccionado:")
    print(f"- Nombre: {usuarios[email].get('nombre')}")
    print(f"- Email: {email}")

    print("\n¬øQu√© dese√°s hacer?")
    print("1) Eliminar administrador")
    print("2) Actualizar datos del administrador")
    print("3) Volver al men√∫")

    opcion = input("\n‚Üí Ingres√° el n√∫mero de la opci√≥n: ").strip()

    if opcion == "1":
        eliminar_usuario_logicamente(email, nombre, usuarios, guardar_datos, RUTA_USUARIOS)
    elif opcion == "2":
        actualizar_administrador(email, usuarios)
    elif opcion == "3":
        print("‚Ü©Ô∏è Volviendo al men√∫.")
    else:
        print("‚ö†Ô∏è Opci√≥n inv√°lida. Volviendo al men√∫.")

def buscar_administradores(nombre_a_buscar, usuarios):
    nombre_a_buscar = nombre_a_buscar.strip().lower()
    if nombre_a_buscar == "":
        return []
    return [
        (email, datos["nombre"])
        for email, datos in usuarios.items()
        if datos.get("rol") == "administrador" and nombre_a_buscar in datos.get("nombre", "").lower()
    ]

def seleccionar_administrador(encontrados, input_fn=input):
    if len(encontrados) == 1:
        return encontrados[0]
    print("\n‚úÖ Administradores encontrados:")
    for i, (email, nombre) in enumerate(encontrados, start=1):
        print(f"{i}) Nombre: {nombre} | Email: {email}")

    while True:
        try:
            seleccion_str = pedir_input_con_cancelar(
                "\n‚Üí Ingres√° el n√∫mero del administrador que quer√©s gestionar (0 o Enter para cancelar): "
            )
            if seleccion_str is None or not seleccion_str.strip() or int(seleccion_str) == 0:
                return None, None
            seleccion = int(seleccion_str)
            if 1 <= seleccion <= len(encontrados):
                return encontrados[seleccion - 1]
            print("‚ö†Ô∏è N√∫mero inv√°lido. Intent√° nuevamente.")
        except ValueError:
            print("‚ö†Ô∏è Ingresaste algo que no es un n√∫mero. Intent√° nuevamente.")

def actualizar_administrador(email, usuarios):
    print(f"\n--- Actualizar datos para: {usuarios[email].get('nombre')} ({email}) ---")

    try:
        nuevo_nombre_input = pedir_input_con_cancelar(
            f"Nuevo nombre (actual: '{usuarios[email].get('nombre')}', Enter para no cambiar): "
        )
        if nuevo_nombre_input is not None and nuevo_nombre_input.strip():
            usuarios[email]["nombre"] = nuevo_nombre_input.strip()
            print("üè∑Ô∏è Nombre actualizado.")
            logger.info(f"Nombre de administrador actualizado para {email}: {nuevo_nombre_input.strip()}")
        elif nuevo_nombre_input == "":
            print("‚ÑπÔ∏è Nombre no modificado.")
            logger.info(f"Nombre no modificado para {email} (se presion√≥ Enter).")

        nueva_contrase√±a_input = pedir_input_con_cancelar("Nueva contrase√±a (Enter para no cambiar): ")
        if nueva_contrase√±a_input:
            if len(nueva_contrase√±a_input) < 6 or not any(c.isupper() for c in nueva_contrase√±a_input):
                print("‚ö†Ô∏è La contrase√±a debe tener al menos 6 caracteres, una may√∫scula y caracter especial. No se actualiz√≥ la contrase√±a.")
                logger.debug(f"Contrase√±a inv√°lida ingresada para {email}")
            else:
                confirmar = pedir_input_con_cancelar("Confirm√° la nueva contrase√±a: ")
                if confirmar and confirmar == nueva_contrase√±a_input:
                    usuarios[email]["contrase√±a"] = nueva_contrase√±a_input
                    print("üîë Contrase√±a actualizada.")
                    logger.info(f"Contrase√±a actualizada para administrador {email}")
                elif confirmar is None:
                    print("‚ÑπÔ∏è Actualizaci√≥n cancelada (confirmaci√≥n).")
                    logger.info(f"Confirmaci√≥n de contrase√±a cancelada para {email}")
                else:
                    print("‚ö†Ô∏è Las contrase√±as no coinciden. No se actualiz√≥ la contrase√±a.")
                    logger.debug(f"Confirmaci√≥n de contrase√±a incorrecta para {email}")
        elif nueva_contrase√±a_input == "":
            print("‚ÑπÔ∏è Contrase√±a no modificada.")
            logger.info(f"Contrase√±a no modificada para {email} (se presion√≥ Enter).")

        guardar_datos(RUTA_USUARIOS, usuarios)
        print(f"‚úÖ Datos del administrador '{email}' actualizados (si se realizaron cambios).")

    except Exception as e:
        print("‚ùå Ocurri√≥ un error al actualizar los datos del administrador.")
        logger.error(f"Error al actualizar datos del administrador {email}: {e}")

def eliminar_usuario_logicamente(email, nombre, usuarios, guardar_datos, ruta):
    if email not in usuarios:
        print(f"‚ùå El usuario con email '{email}' no existe.")
        logger.warning(f"Intento de eliminaci√≥n fallido: usuario '{email}' no existe.")
        return

    if not usuarios[email].get("activo", True):
        print(f"‚ÑπÔ∏è El usuario '{nombre}' ya est√° inactivo.")
        logger.info(f"Usuario '{email}' ya estaba inactivo al intentar eliminarlo.")
        return

    confirmacion = input(f"‚ö†Ô∏è ¬øEst√°s seguro que quer√©s eliminar a '{nombre}' con email '{email}'? (s/n): ").strip().lower()
    if confirmacion == "s":
        usuarios[email]["activo"] = False
        guardar_datos(ruta, usuarios)
        print(f"‚úÖ Usuario '{nombre}' desactivado exitosamente.")
        logger.info(f"Usuario '{email}' desactivado l√≥gicamente.")
    else:
        print("‚ùå Eliminaci√≥n cancelada.")
        logger.info(f"Eliminaci√≥n cancelada para el usuario '{email}'.")

# FUNCIONES PARA LOS ELIMINADOS

def ver_usuarios_inactivos_por_rol(rol, usuarios):
    print(f"\nüóëÔ∏è Usuarios inactivos con rol '{rol}':")
    encontrados = False
    for email, data in usuarios.items():
        if data.get("rol") == rol and not data.get("activo", True):
            print(f"- Email: {email}, Nombre: {data.get('nombre', 'N/A')}")
            encontrados = True
    if not encontrados:
        print(f"‚ÑπÔ∏è No se encontraron usuarios inactivos con rol '{rol}'.")

def ver_clientes_inactivos(rol, usuarios):
    ver_usuarios_inactivos_por_rol(rol, usuarios)

def ver_administradores_inactivos(rol, usuarios):
    ver_usuarios_inactivos_por_rol(rol, usuarios)

# AGREGAR NUEVA CATEGORIA Y AGREGAR NUEVO PRODUCTO A CATEGORIA EXISTENTE
def agregar_categoria_inventario(stock, precios):
    nombre_cat = input("Nombre de la nueva categor√≠a: ").strip().lower()

    if not nombre_cat:
        print("‚ö†Ô∏è El nombre no puede estar vac√≠o.")
        logger.debug("Intento fallido de agregar categor√≠a: nombre vac√≠o.")
        return

    if nombre_cat.lower() in (k.lower() for k in stock.keys()):
        print(f"‚ö†Ô∏è La categor√≠a '{nombre_cat}' (o una similar) ya existe.")
        logger.info(f"Intento de duplicar categor√≠a: '{nombre_cat}' ya existe.")
        return

    stock[nombre_cat] = {}
    precios[nombre_cat] = {}

    try:
        guardar_datos(RUTA_STOCK, stock)
        guardar_datos(RUTA_PRECIOS, precios)
        print(f"‚úÖ Categor√≠a '{nombre_cat}' agregada.")
        logger.info(f"Categor√≠a '{nombre_cat}' agregada exitosamente.")
    except Exception as e:
        print("‚ùå Error al guardar la nueva categor√≠a.")
        logger.error(f"Error al guardar categor√≠a '{nombre_cat}': {e}")

def agregar_producto_inventario(stock, precios):
    if not stock:
        print("‚ÑπÔ∏è No hay categor√≠as. Agreg√° una primero.")
        logger.debug("Intento de agregar producto fallido: no hay categor√≠as disponibles.")
        return

    cat_elegida_key = obtener_categoria_existente(stock, tipo="stock", mensaje_personalizado="Categor√≠a del producto al que quieres agregar: ")
    if not cat_elegida_key:
        logger.debug("Selecci√≥n de categor√≠a cancelada por el usuario.")
        return

    nombre_prod = obtener_nombre_producto(stock[cat_elegida_key], cat_elegida_key)
    if not nombre_prod:
        logger.debug(f"Entrada de nombre de producto cancelada para categor√≠a '{cat_elegida_key}'.")
        return

    cantidad_inicial, precio_inicial = obtener_stock_y_precio(nombre_prod)
    if cantidad_inicial is None or precio_inicial is None:
        logger.debug(f"Cancelaci√≥n en carga de stock o precio para '{nombre_prod}' en '{cat_elegida_key}'.")
        return

    try:
        stock[cat_elegida_key][nombre_prod.lower()] = cantidad_inicial
        precios[cat_elegida_key][nombre_prod.lower()] = precio_inicial

        guardar_datos(RUTA_STOCK, stock)
        guardar_datos(RUTA_PRECIOS, precios)

        print(f"‚úÖ Producto '{nombre_prod}' agregado a '{cat_elegida_key}'.")
        logger.info(f"Producto agregado: '{nombre_prod}' a categor√≠a '{cat_elegida_key}' - Cantidad: {cantidad_inicial}, Precio: {precio_inicial}")
    except Exception as e:
        print("‚ùå Error al guardar el nuevo producto.")
        logger.error(f"Error al agregar producto '{nombre_prod}' en '{cat_elegida_key}': {e}")

def obtener_nombre_producto(stock_categoria, cat_elegida_key):
    nombre_prod = input(f"Nombre del nuevo producto para '{cat_elegida_key}': ").strip()
    if not nombre_prod:
        print("‚ö†Ô∏è El nombre no puede estar vac√≠o.")
        return None
    if nombre_prod.lower() in (p.lower() for p in stock_categoria.keys()):
        print(f"‚ö†Ô∏è El producto '{nombre_prod}' (o similar) ya existe en '{cat_elegida_key}'.")
        return None
    return nombre_prod

def obtener_stock_y_precio(nombre_prod):
    try:
        cantidad_inicial = int(input(f"Stock inicial para '{nombre_prod}': "))
        precio_inicial_str = input(f"Precio inicial para '{nombre_prod}' (ej: 10.99): ").replace(',', '.')
        precio_inicial = float(precio_inicial_str)
        if cantidad_inicial < 0 or precio_inicial < 0:
            print("‚ö†Ô∏è El stock y el precio no pueden ser negativos.")
            return None, None
        return cantidad_inicial, precio_inicial
    except ValueError:
        print("‚ö†Ô∏è Cantidad o precio inv√°lido.")
        return None, None

# FUNCIONES PARA ELIMINAR PRODUCTOS Y CATEGOR√çAS
def obtener_categoria_existente(diccionario, tipo="stock", mensaje_personalizado=None):
    if not diccionario:
        print(f"No hay categor√≠as en el {tipo}.")
        return None

    print("Categor√≠as existentes:", ", ".join(diccionario.keys()))

    if mensaje_personalizado:
        prompt = mensaje_personalizado
    else:
        prompt = f"Categor√≠a a modificar ({tipo}): "

    cat_input_usuario = input(prompt).strip().lower()
    if not cat_input_usuario:
        print(f"‚ö† El nombre de la categor√≠a no puede estar vac√≠o.")
        return None

    for key_original in diccionario.keys():
        if key_original.lower() == cat_input_usuario:
            return key_original

    print(f"‚ö† Categor√≠a '{cat_input_usuario}' no encontrada.")
    return None

def obtener_producto_existente(diccionario, categoria, tipo="stock"):
    if not diccionario[categoria]:
        print(f"‚ÑπÔ∏è La categor√≠a '{categoria}' est√° vac√≠a.")
        return None

    print(f"Productos en la categor√≠a '{categoria}': {', '.join(diccionario[categoria].keys())}")
    prod_input = input(f"Producto a modificar {tipo}: ").strip().lower()
    if not prod_input:
        print(f"‚ö†Ô∏è El nombre del producto no puede estar vac√≠o.")
        return None

    if prod_input not in diccionario[categoria]:
        print(f"Producto '{prod_input}' no existe en la categor√≠a '{categoria}'.")
        return None

    return prod_input

#MODIFICAR STOCK DE PRODUCTO
def obtener_nuevo_stock(stock_actual):
    try:
        nuevo_stock_str = input(f"Nuevo stock para {stock_actual[0]} (actual: {stock_actual[1]}): ")
        if not nuevo_stock_str.strip():
            print("‚ö†Ô∏è La entrada para el nuevo stock no puede estar vac√≠a. Operaci√≥n cancelada.")
            return None

        nuevo_stock = int(nuevo_stock_str)
        if nuevo_stock < 0:
            print("Stock no puede ser negativo.")
            return None

        return nuevo_stock
    except ValueError:
        print("Cantidad inv√°lida. Por favor, ingrese un n√∫mero entero.")
        return None

def modificar_stock_producto(stock):
    mostrar_tabla_stock(stock)
    if not stock:
        print("No hay stock.")
        return

    print("\n--- Modificar Stock de Producto ---")
    categoria = obtener_categoria_existente(stock, tipo="stock", mensaje_personalizado="Categor√≠a del producto cuyo stock quer√©s modificar: ")
    if not categoria:
        return

    producto = obtener_producto_existente(stock, categoria)
    if not producto:
        return

    nuevo_stock = obtener_nuevo_stock((producto, stock[categoria][producto]))
    if nuevo_stock is None:
        return

    stock[categoria][producto] = nuevo_stock
    guardar_datos(RUTA_STOCK, stock)
    print("‚úÖ Stock actualizado.")

def mostrar_tabla_stock(stock_actual):
    """
    Muestra el inventario agrupado por categor√≠a, sin la columna de precios.
    Pensada para usarse antes de editar el stock.
    """

    print("\nüìã Inventario (solo Stock):")
    print("-" * 70)

    if not stock_actual:
        print("El inventario est√° vac√≠o.")
        print("-" * 70)
        return

    categorias_validas = dict(filter(
        lambda item: len(item[1]) > 0,
        stock_actual.items()
    ))

    if not categorias_validas:
        print("No hay categor√≠as con productos.")
        print("-" * 70)
        return

    for categoria, productos in sorted(categorias_validas.items()):
        print(f"üìÅ Categor√≠a: {categoria.capitalize()}")
        print(f"    {'Producto':<25} | {'Stock':<12}")
        print("    " + "-" * 60)

        for producto, cantidad in sorted(productos.items()):
            stock_str = "Sin stock" if cantidad <= 0 else str(cantidad)
            print(f"    - {producto.capitalize():<24} | {stock_str:<12}")

        print("-" * 40)

    print("-" * 70)

# MODIFICAR PRECIO DE PRODUCTO
def obtener_nuevo_valor(tipo, valor_actual):
    try:
        nuevo_valor_str = input(f"Nuevo {tipo} para {valor_actual[0]} (actual: {valor_actual[1]}): ").replace(',', '.')
        if not nuevo_valor_str.strip():
            print(f"‚ö†Ô∏è La entrada para el nuevo {tipo} no puede estar vac√≠a.")
            return None

        nuevo_valor = float(nuevo_valor_str) if tipo == "precio" else int(nuevo_valor_str)
        if nuevo_valor < 0:
            print(f"{tipo.capitalize()} no puede ser negativo.")
            return None

        return nuevo_valor
    except ValueError:
        print(f"{tipo.capitalize()} inv√°lido.")
        return None

def modificar_precio_producto(precios):
    if not precios:
        print("No hay precios definidos.")
        return

    print("\n--- Modificar Precio de Producto ---")
    categoria = obtener_categoria_existente(precios, tipo="precio", mensaje_personalizado="Categor√≠a del producto cuyo precio quer√©s modificar: ")
    if not categoria:
        return

    producto = obtener_producto_existente(precios, categoria, tipo="precio")
    if not producto:
        return

    nuevo_precio = obtener_nuevo_valor("precio", (producto, precios[categoria][producto]))
    if nuevo_precio is None:
        return

    precios[categoria][producto] = nuevo_precio
    guardar_datos(RUTA_PRECIOS, precios)
    print("‚úÖ Precio actualizado.")

#ELIMINAR PRODUCTO
def pedir_confirmacion_eliminacion(producto, categoria):
    """
    Pregunta al usuario si desea eliminar el producto.
    """
    try:
        confirmacion = input(f"‚ùì ¬øSeguro que desea eliminar el producto '{producto}' de la categor√≠a '{categoria}'? Esto tambi√©n eliminar√° su precio. (s/n): ").strip().lower()
        return confirmacion == 's'
    except AttributeError:
        return False

def ejecutar_eliminacion_producto(stock, precios, categoria, producto):
    """
    Realiza la eliminaci√≥n del producto del stock y del archivo de precios.
    """
    del stock[categoria][producto]
    print(f"‚úÖ Producto '{producto}' eliminado del stock de la categor√≠a '{categoria}'.")

    if categoria in precios and producto in precios[categoria]:
        del precios[categoria][producto]
        print(f"‚úÖ Precio para '{producto}' eliminado de la categor√≠a '{categoria}'.")
    else:
        print(f"‚ÑπÔ∏è No se encontr√≥ un precio para '{producto}' en la categor√≠a '{categoria}'.")

    guardar_datos(RUTA_STOCK, stock)
    guardar_datos(RUTA_PRECIOS, precios)
    print("‚úÖ Cambios guardados en los archivos.")

def iniciar_eliminacion_producto(stock, precios):
    """
    Controlador principal para gestionar la eliminaci√≥n de un producto del inventario.
    """
    if not stock:
        print("‚ÑπÔ∏è El inventario est√° vac√≠o. No hay productos para eliminar.")
        return

    print("\n--- Eliminar Producto del Inventario ---")

    categoria = obtener_categoria_existente(stock, mensaje_personalizado="Categor√≠a del producto que quer√©s eliminar: ")
    if not categoria:
        return

    producto = obtener_producto_existente(stock, categoria)
    if not producto:
        return

    if pedir_confirmacion_eliminacion(producto, categoria):
        ejecutar_eliminacion_producto(stock, precios, categoria, producto)
    else:
        print("‚ùå Operaci√≥n cancelada.")

def eliminar_producto_inventario(stock, precios):
    iniciar_eliminacion_producto(stock, precios)

# ELIMINAR CATEGOR√çA
def pedir_confirmacion_eliminacion_categoria(categoria):
    """
    Pregunta al usuario si desea eliminar la categor√≠a completa y todos sus productos.
    """
    print(f"\n‚ÄºÔ∏è ADVERTENCIA ‚ÄºÔ∏è")
    print(f"Est√° a punto de eliminar la categor√≠a '{categoria}' y TODOS sus productos asociados")
    print("del stock y de la lista de precios. Esta acci√≥n no se puede deshacer.")

    try:
        confirmacion = input(f"¬øEst√° ABSOLUTAMENTE SEGURO de que desea eliminar la categor√≠a '{categoria}'? (s/n): ").strip().lower()
        return confirmacion == 's'
    except AttributeError:
        print("‚ùå Entrada inv√°lida para la confirmaci√≥n. Operaci√≥n cancelada.")
        return False

def ejecutar_eliminacion_categoria(stock, precios, categoria):
    """
    Elimina la categor√≠a y todos sus productos del stock y precios.
    """
    del stock[categoria]
    guardar_datos(RUTA_STOCK, stock)
    print(f"‚úÖ Categor√≠a '{categoria}' y sus productos eliminados del stock.")

    if categoria in precios:
        del precios[categoria]
        guardar_datos(RUTA_PRECIOS, precios)
        print(f"‚úÖ Categor√≠a '{categoria}' y sus precios eliminados de la lista de precios.")
    else:
        print(f"‚ÑπÔ∏è Categor√≠a '{categoria}' no estaba presente en la lista de precios.")

    print(f"‚úÖ Operaci√≥n de eliminaci√≥n para la categor√≠a '{categoria}' completada.")

def iniciar_eliminacion_categoria(stock, precios):
    """
    Controlador principal para eliminar una categor√≠a del inventario.
    """
    if not stock:
        print(" ‚ÑπÔ∏è El inventario de stock est√° vac√≠o. No hay categor√≠as para eliminar.")
        return

    print("\n--- Eliminar Categor√≠a del Inventario ---")

    categoria = obtener_categoria_existente(stock, mensaje_personalizado="Categor√≠a que quer√©s eliminar: ")
    if not categoria:
        return

    if pedir_confirmacion_eliminacion_categoria(categoria):
        ejecutar_eliminacion_categoria(stock, precios, categoria)
    else:
        print(f"‚ùå Operaci√≥n de eliminaci√≥n para la categor√≠a '{categoria}' cancelada por el usuario.")

def eliminar_categoria_inventario(stock, precios):
    iniciar_eliminacion_categoria(stock, precios)

# VER HISTORIAL DE VENTAS CON PAGINADO
def imprimir_detalle_venta(i, venta):
    print("-" * 70)
    print(f"| Venta #{i} | Cliente: {venta.get('cliente_email', 'N/A')}|")
    print("Items Comprados:")
    if 'items' in venta and venta['items']:
        print(f"  {'Producto (Categor√≠a)':<30} | {'Cant.':<5} | {'P.Unit':<10} | {'Subtotal':<10}")
        print("  " + "-" * 60)
        for item in venta['items']:
            prod_cat = f"{item.get('producto', '?').capitalize()} ({item.get('categoria', '?').capitalize()})"
            cant = item.get('cantidad', 0)
            p_unit = item.get('precio_unitario', 0.0)
            subt = item.get('subtotal', 0.0)
            print(f"  - {prod_cat:<29} | {cant:<5} | ${p_unit:<9.2f} | ${subt:<9.2f}")
    else:
        print("  (No hay detalle de items)")
    print(f"Costo Total Venta: ${venta.get('costo_total', 0.0):.2f}")

def calcular_indices_paginacion(pagina_actual, ventas_por_pagina):
    inicio = (pagina_actual - 1) * ventas_por_pagina
    fin = inicio + ventas_por_pagina
    return inicio, fin

def obtener_opcion_navegacion():
    print("\nOpciones: (s)iguiente, (a)nterior, (q)uit/salir, o n√∫mero de p√°gina")
    return input("‚Üí Ingres√° tu opci√≥n: ").strip().lower()

def actualizar_pagina_actual(accion, pagina_actual, total_ventas, ventas_por_pagina):
    max_paginas = (total_ventas + ventas_por_pagina - 1) // ventas_por_pagina

    if accion == 's':
        if pagina_actual * ventas_por_pagina < total_ventas:
            return pagina_actual + 1
        else:
            print("‚ÑπÔ∏è Ya est√°s en la √∫ltima p√°gina.")
    elif accion == 'a':
        if pagina_actual > 1:
            return pagina_actual - 1
        else:
            print("‚ÑπÔ∏è Ya est√°s en la primera p√°gina.")
    elif accion.isdigit():
        num_pagina = int(accion)
        if 1 <= num_pagina <= max_paginas:
            return num_pagina
        else:
            print(f"‚ö†Ô∏è N√∫mero de p√°gina inv√°lido. Debe ser entre 1 y {max_paginas}.")
    elif accion != 'q':
        print("‚ö†Ô∏è Opci√≥n inv√°lida.")

    return pagina_actual

def mostrar_pagina(historial, pagina_actual, ventas_por_pagina):
    total_ventas = len(historial)
    inicio, fin = calcular_indices_paginacion(pagina_actual, ventas_por_pagina)

    print(f"\n--- Mostrando P√°gina {pagina_actual} (Ventas {inicio + 1} a {min(fin, total_ventas)}) ---")
    for i, venta in enumerate(historial[inicio:fin], start=inicio + 1):
        imprimir_detalle_venta(i, venta)

    print(f"\nMostrando ventas {inicio + 1}-{min(fin, total_ventas)} de {total_ventas}")


# CONSULTAR PORCENTAJE DE CUMPLIMIENTO DE OBJETIVO DE GANANCIAS
def porcentaje_objetivo_ganancias(ventas_realizadas):
    """Consulta el porcentaje de cumplimiento seg√∫n un objetivo ingresado."""
    objetivo_str = ""
    objetivo = None
    objetivo_valido = False

    while not objetivo_valido:
        print("\n--- Porcentaje de Cumplimiento de Objetivo de Ganancias ---")
        objetivo_str = input("¬øCu√°l es el objetivo de ganancias que quer√©s consultar? (0 para cancelar): ").strip()
        if objetivo_str:
            try:
                objetivo = float(objetivo_str)
                if objetivo == 0:
                    print("‚Ü©Ô∏è Operaci√≥n cancelada.")
                    return
                if objetivo > 0:
                    objetivo_valido = True
                else:
                    print("‚ö† El objetivo debe ser un n√∫mero positivo.")
            except ValueError:
                print("‚ö† Entrada inv√°lida. Ingres√° un n√∫mero v√°lido.")
        else:
            print("‚ö† El campo no puede estar vac√≠o.")

    subtotales = map(lambda venta: venta.get("subtotal", 0.0), ventas_realizadas)
    ganancia_total = sum(subtotales) if ventas_realizadas else 0.0

    porcentaje = (ganancia_total / objetivo) * 100 if objetivo > 0 else 0

    print(f"\nüí∞ Ganancia actual acumulada: ${ganancia_total:.2f}")
    print(f"üéØ Objetivo ingresado: ${objetivo:.2f}")
    print(f"üìà Porcentaje de cumplimiento: {porcentaje:.2f}%")

def menu_principal():
    # Carga inicial de datos ya se hizo al inicio del script
    ejecutando = True
    while ejecutando:
        print("\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ MEN√ö PRINCIPAL ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
        if sesion_activa["email"]:
            print(f"Sesi√≥n activa: {usuarios.get(sesion_activa['email'], {}).get('nombre', sesion_activa['email'])} ({sesion_activa['rol']})")
            if sesion_activa["rol"] == "administrador":
                print("1) Ir al Men√∫ Administrador")
            else: # Cliente
                print("1) Ir al Men√∫ Cliente")
            print("2) Cerrar sesi√≥n")
            print("3) Salir de la aplicaci√≥n")
        else:
            print("1) Registrarse")
            print("2) Iniciar sesi√≥n")
            print("3) Salir de la aplicaci√≥n")

        opcion = input("\n‚Üí Ingres√° el n√∫mero de la opci√≥n: ").strip()

        if sesion_activa["email"]: # Hay sesi√≥n activa
            if opcion == "1":
                if sesion_activa["rol"] == "administrador":
                    menu_administrador(stock, precios, usuarios, historial_ventas)
                else:
                    menu_cliente(stock, precios, sesion_activa, historial_ventas, ventas_realizadas)
            elif opcion == "2":
                cerrar_sesion()
            elif opcion == "3":
                print("üëã ¬°Gracias por usar la aplicaci√≥n! Guardando datos...")
                # Guardar todos los datos antes de salir (aunque ya se guardan incrementalmente)
                guardar_datos(RUTA_USUARIOS, usuarios)
                guardar_datos(RUTA_STOCK, stock)
                guardar_datos(RUTA_PRECIOS, precios)
                guardar_datos(RUTA_HISTORIAL_VENTAS, historial_ventas)
                guardar_datos(RUTA_VENTAS_REALIZADAS, ventas_realizadas)
                print("üíæ ¬°Datos guardados! ¬°Hasta luego!")
                ejecutando = False
            else:
                print("‚ö†Ô∏è Esa no es una opci√≥n v√°lida. Intent√° de nuevo.")
        else: # No hay sesi√≥n activa
            if opcion == "1":
                crear_usuario(stock, precios, sesion_activa, historial_ventas, ventas_realizadas)
            elif opcion == "2":
                iniciar_sesion()
            elif opcion == "3":
                print("üëã ¬°Gracias por usar la aplicaci√≥n! ¬°Hasta luego!")
                ejecutando = False
            else:
                print("‚ö†Ô∏è Esa no es una opci√≥n v√°lida. Intent√° de nuevo.")

# ======================
# Ejecutar el Programa
# ======================
if __name__ == "__main__":
    menu_principal()